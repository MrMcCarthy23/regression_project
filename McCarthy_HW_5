# %%
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
from scipy import stats

# %% [markdown]
# <h1> Question 4.3 <h1>

# %%
#read in the data
df = pd.read_csv('homework5_solar_data.csv')

# %%
df.head()

# %%
#fit a simple linear regression model to the data
y = df["tot_heat"]
X = sm.add_constant(df["north"])
model = sm.OLS(y,X).fit()
predictions = model.predict(X)
residuals = model.resid

# %%
#construct a normal probability plot of the residuals

fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(16, 6))

# First plot: Normal Probability Plot of Residuals.
stats.probplot(model.resid, dist="norm", plot=axs[0])
axs[0].set_title('Normal Probability Plot of Residuals')
axs[0].set_xlabel('Theoretical Quantiles')
axs[0].set_ylabel('Ordered Values')

# Second plot: Residuals vs. Predicted Values.
axs[1].scatter(predictions, residuals, edgecolor='k', facecolor='grey', alpha=0.7)
axs[1].hlines(y=0, xmin=min(predictions), xmax=max(predictions), color='red', linestyle='--')
axs[1].set_title('Residuals vs. Predicted Values')
axs[1].set_xlabel('Predicted Values')
axs[1].set_ylabel('Residuals')

# Improve layout and show plot.
plt.tight_layout()
plt.show()

# %% [markdown]
# <h1> Interpretation <h1>
# <h2>
# Part a:
# <h2>
# <h4>
#     From the Normal Probability Plot of the residuals (QQ plot) we can visually asses that the residuals are holding to some level of normality. There is a concentration of residuals about the point 0.0 on the X axis (Theoretical ideal for a normal distribution on this graph can be visualized by first placing points on a standard normal distribution density curve at regular intervals with respect to spacing on the curve itself. Then projecting those regularly spaced points onto the x axis. This will show an increase in density of projected points as you approach the x values under the peak of the normal curve). This is accompanied by a sample size that is large enough, >20 according to our text (pg. 144), to be a stable plot bolstering this conclusion. 
# <h2>
# Part b:
# <h2>
# <h4>	
#     As for the residuals vs. predicted values plot we can see that there is a concentration of points in the higher range of the predicted values. This does not necessarily mean that the plot is out of expectation and the model is defective, however, more predicted values in the lower range would yield a better assessment of model fit.
# <h4> 

# %% [markdown]
# <h1>Question 4.4<h1>

# %%
from statsmodels.stats.outliers_influence import OLSInfluence

# %%
df2 = pd.read_csv('homework5_fuel_data.csv')

# %%
df2

# %%
model2 = sm.OLS(df2['Y'],df2[['X1','X6']]).fit()
residuals2 = model2.resid
predictions2 = model2.predict(df2[['X1','X6']])
influence = OLSInfluence(model2)
press_resids = influence.resid_press
Rstzd_resids = influence.get_resid_studentized_external()

# %%
#construct a normal probability plot of the residuals

fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(16, 6))

# First plot: Normal Probability Plot of Residuals.
stats.probplot(press_resids, dist="norm", plot=axs[0])
axs[0].set_title('Normal Probability Plot of Residuals')
axs[0].set_xlabel('Theoretical Quantiles')
axs[0].set_ylabel('Ordered Values')

# Second plot: Residuals vs. Predicted Values.
axs[1].scatter(predictions2, press_resids, edgecolor='k', facecolor='grey', alpha=0.7)
axs[1].hlines(y=0, xmin=min(predictions2), xmax=max(predictions2), color='red', linestyle='--')
axs[1].set_title('Residuals vs. Predicted Values')
axs[1].set_xlabel('Predicted Values')
axs[1].set_ylabel('Residuals')

# Improve layout and show plot.
plt.tight_layout()
plt.show()

# %%
from statsmodels.graphics.regressionplots import plot_partregress_grid

fig = plt.figure(figsize=(12, 8))
plot_partregress_grid(model2, fig=fig)
plt.tight_layout()
plt.show()



# %%
influence.plot_influence()

# %%
press_resids

# %%
Rstzd_resids

# %%




